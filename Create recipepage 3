import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class CreateRecipePage extends StatefulWidget {
  @override
  _CreateRecipePageState createState() => _CreateRecipePageState();
}

class _CreateRecipePageState extends State<CreateRecipePage> {
  // کنترلرهای برای فیلدهای ورودی
  final TextEditingController nameController = TextEditingController();
  final TextEditingController ingredientsController = TextEditingController();
  final TextEditingController instructionsController = TextEditingController();
  final TextEditingController imageUrlController = TextEditingController();
  
  // متغیرهای مربوط به انتخاب‌ها
  String selectedFoodType = 'Appetizer';
  String selectedPreferences = 'Vegan'; // مثال
  String selectedAllergy = 'Nuts'; // مثال
  String userId = 'sampleUserId'; // این باید از حالت لاگین کاربر گرفته شود

  // ذخیره دستور غذا در دیتابیس
  Future<void> saveRecipe() async {
    try {
      await FirebaseFirestore.instance.collection('recipes').add({
        'name': nameController.text,
        'ingredients': ingredientsController.text,
        'foodType': selectedFoodType,
        'preferences': selectedPreferences,
        'allergy': selectedAllergy,
        'instructions': instructionsController.text,
        'imageUrl': imageUrlController.text.isNotEmpty ? imageUrlController.text : null,
        'createdBy': userId,
        'timestamp': FieldValue.serverTimestamp(), // مقداردهی خودکار زمان
      });

      // پیغام موفقیت
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Recipe saved successfully!')),
      );
      Navigator.pop(context); // بازگشت به صفحه قبلی
    } catch (error) {
      print("Error saving recipe: $error");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to save recipe')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Create Recipe'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
              controller: nameController,
              decoration: InputDecoration(labelText: 'Recipe Name'),
            ),
            TextField(
              controller: ingredientsController,
              decoration: InputDecoration(labelText: 'Ingredients'),
            ),
            TextField(
              controller: instructionsController,
              decoration: InputDecoration(labelText: 'Instructions'),
            ),
            TextField(
              controller: imageUrlController,
              decoration: InputDecoration(labelText: 'Image URL'),
            ),
            DropdownButton<String>(
              value: selectedFoodType,
              onChanged: (String? newValue) {
                setState(() {
                  selectedFoodType = newValue!;
                });
              },
              items: <String>['Appetizer', 'Main', 'Dessert']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            DropdownButton<String>(
              value: selectedPreferences,
              onChanged: (String? newValue) {
                setState(() {
                  selectedPreferences = newValue!;
                });
              },
              items: <String>['Vegan', 'Non-Vegan']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            DropdownButton<String>(
              value: selectedAllergy,
              onChanged: (String? newValue) {
                setState(() {
                  selectedAllergy = newValue!;
                });
              },
              items: <String>['Nuts', 'Dairy', 'Gluten', 'None']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            ElevatedButton(
              onPressed: saveRecipe,
              child: Text('Save Recipe'),
            ),
          ],
        ),
      ),
    );
  }
}
